# Синхронизация потоков. Очереди. Блокировки. Условные переменные
# Если запустить несколько потоков доя решения задачи, то рано или поздно придется обмениваться данными между потоками
# !!!Предпочтительно использовать очереди при разработке многопоточных программ!!!

# Очереди. Модуль queue и очереди для обмена данными между потоками
from queue import Queue
from threading import Thread


# функция worker будет выполняться в 2 независимых потоках, они будут выполняться параллельно
def worker(q, n):
    while True:
        # каждый поток в бесконечном цикле будет получать сообщение из очереди при помощи вызова метода get у объекта q
        item = q.get()
        if item is None:
            break  # функция потока при проверке условия завершает свою работу
        print("process data:", n, item)


q = Queue(5)  # создаем объект типа очередь с максимальным размером = 5

# Для обработки сообщений очереди создаем потоки - объекты классы Thread, передаем функцию worker, а в нее - очередь
th1 = Thread(target=worker, args=(q, 1))
th2 = Thread(target=worker, args=(q, 2))
th1.start(); th2.start()

for i in range(50):
    # если в очереди уже будет 5 элементов, то вызов метода put() заблокирует выполнение потока, который вызвал
    # этот метод, и будет ждать, пока не появится в очереди свободное место
    q.put(i)  # для помещения объектов в очередь используем метод put()


"""Большое внимание нужно уделить правильному завершению потока
с точки зрения процесса, ресурсами владеет процесс, те выделенная память или открытый файл - ими владеет процесс,
но процесс ничего не знает о том, что делаем с этими ресурсами поток, и если поток завершить аварийно, то файл может
остаться незакрытым, блокировка может остаться невысвобожденной, и теоретически это может привести к непредвиденным
последствиям, поэтому в Python не существует функции аварийного завершения потока - очень важно это делать в функции
самого потока"""

# в очередь помещается специальное значение None, и функция потока при проверке условия завершает свою работу
q.put(None); q.put(None)

th1.join()
th2.join()


