# Синхронизация потоков, блокировки
# Для синхронизации работы потоков предпочительнее использовать очереди
# Иногда приходится использовать блокировки, которые как минимум замедляют работу программы
import threading


# Блокировки можно использовать без контекстного менеджера - создаем объекты класса RLock(есть еще Lock, но
# предпочтительнее объекты RLock - они позволяют получить в одном потоке блокировку дважды)
a = threading.RLock()
b = threading.RLock()

# !!! Если использовать этот код в большом количестве процессов, то рано или поздно это приведет к ситуации deadlock
# тк освобождаем в неправильной последовательности блокировки (предпочтительнее использовать контекстный менеджер)
def foo():
    try:
        # вызываем метод acquire() - получить или захватить блокировку
        a.acquire()
        b.acquire()
    finally:
        # вызываем метод release() - высвободить блокировку
        a.release()
        b.release()