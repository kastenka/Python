# Создание сокета, таймауты и обработка ошибок. Сервер

"""Настоящие программы сложнее, связано это с обработкой ошибок.
Сеть может работать стабильно не всегда, в ней могут появляться задержки, могут не доходить пакеты, могут быть разрывы
соединений. Поэтому при написании сетевых программ нужно быть к этому готовым. Необходимо работать с сокетами правильно.
Прежде всего нужно задавать таймауты при сетевых операциях, грамотно обрабатывать сетевые ошибки.
"""
import socket


with socket.socket() as sock:
    sock.bind(("", 10001))
    sock.listen()

    while True:
        conn, addr = sock.accept()  # бесконечно в цикле вызываем accept, слушаем сокет и получаем новое соединение

        # После того, как получили соединение, вызываем метод settimeout для объекта - для ограничения времени ожидания
        # системных вызовов
        """По умолчанию все вызовы для этого объекта соединения, например, вызов recv, вызов send, будут заблокированы
        до тех пор, пока данные на другой стороне кто-то не сможет прочитать или записать
        По умолчанию таймаута нет, можем передать None - будет значение по умолчанию. Если передадим timeout = 0, это
        переведет сокет в неблокирующий режим."""
        conn.settimeout(5)  # если в сокет не поступит данных в течении 5 секунд, то сгенериться socket.timeout
        with conn:
            while True:
                try:
                    data = conn.recv(1024)
                except socket.timeout:  # как обрабатывать решать самим
                    print("close connection by timeout")
                    break

                if not data:
                    break
                print(data.decode("utf8"))
