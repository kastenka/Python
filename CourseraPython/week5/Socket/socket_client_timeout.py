# Создание сокета, таймауты и обработка ошибок. Клиент

"""Настоящие программы сложнее, связано это с обработкой ошибок.
Сеть может работать стабильно не всегда, в ней могут появляться задержки, могут не доходить пакеты, могут быть разрывы
соединений. Поэтому при написании сетевых программ нужно быть к этому готовым. Необходимо работать с сокетами правильно.
Прежде всего нужно задавать таймауты при сетевых операциях, грамотно обрабатывать сетевые ошибки.
"""
import socket


"""На клиенте существует connect timeout, который задается в методе create_connection, и будет распространяться только
на установку соединения с сервером, те если в течении 5 секунд сервер не смог подключить соединение и наше соединение
не было установлено, то возникнет исключение socket.timeout и нам на стороне клиента нужно будет обработать"""
with socket.create_connection(("127.0.0.1", 10001), 5) as sock:

    # после того, как соединение установлено, можно задать socket read timeout - таймаут на все операции с сокетом
    sock.settimeout(2)
    try:
        sock.sendall("ping".encode("utf8"))
    except socket.timeout:
        # если не смогли прочитать данные из сокета или записать
        print("send data timeout")
    except socket.error as ex:
        # любое другое исключение, базовый класс для обработки исключений socket - socket.error
        print("send data error", ex)

# !!! Если попробовать записать данные на стороне клиента в сокет, а сервер уже закрыл соединение, то на первый взгляд
# покажется, что записали, а после второй попытки получим исключение ConnectionAbortedError(подкласс у socket.error)
# Чтобы отправить данные, нужно повторно переподключиться к серверу и успеть в течение 5 секунд отправить данные