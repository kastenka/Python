# Процессы. Создание процессов на Python. Создание дочернего процесса
import time
import os

"""
Процесс в ОС создается при помощи системного вызова fork() - на Windows не работает
Системный вызов fork создает точную копию родительского процесса - вся память, все файловые дискрипторы и все ресурсы,
которые были доступны в родительском процессе, будут целиком и полностью скопированы в дочернем процессе
После того, как системный вызов fork отработал - с этого момента у нас два процесса в ОС
Единственное отличие, что системный вызов fork в родительский процесс вернет PID дочернего процесса, а в дочернем
процессе переменная PID будет равна нулю
"""


pid = os.fork()  # создаем дочерний процесс
if pid == 0:
    # дочерний процесс
    while True:
        print("child:", os.getpid())
        time.sleep(2)
else:
    # родительский процесс
    print("parent", os.getpid())
    os.wait()  # вызываем доп. системный вызов, который позволяет нам дожидаться завершения созданного дочернего поцесса
