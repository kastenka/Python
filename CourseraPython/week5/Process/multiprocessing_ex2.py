# Процессы. Обычно используют модуль multiprocessing для создания процессов
# Существует альтернативный метод создания процесса при помощи multiprocessing - при помощи наследования
# !!! Важно ожидать завершения всех дочерних процессов, чтобы контролировать освобождение всех ресурсов
from multiprocessing import Process


# объявляем свой класс
class PrintProcess(Process):  # наследуемся от класса  multiprocessing.Process

    # в конструктор передаем нужные параметры для функции, которая должна быть запущена в дочернем процессе
    def __init__(self, name):
        super().__init__()
        self.name = name

    # переопределяем метод run - реализуем код, вызываем дополнительные функции и используем все параметры
    def run(self):
        print("Hello", self.name)


if __name__ == "__main__":
    p = PrintProcess("Mike")  # создаем объект нашего класса, передаем туда параметры

    # вызываем метод start()
    p.start()  # вызовет fork и выполнит наш код в дочернем процессе
    
    p.join()  # вызываем метод join для ожидания завершения дочернего процесса
