# Классы и экземпляры. Часть 2 - Конструктор экземпляра класса
# конструктор экземпляра класса позволяет переопределить какие-то действия, которые происходят с экземпляром
# до его инициализации - на практике встречается не часто

class Planet:

    # конструктор экземпляра класса __new__, первым аргументом cls принимает класс
    def __new__(cls, *args, **kwargs):
        print("__new__ called")
        # ниже определено тоже самое, что делает Python
        # super() возвращает родителя нашего класса
        # вызываем метод __new__(cls) и возвращается экземпляр
        obj = super().__new__(cls)  # создание нового экземпляра класса, super() возвращает родителя нашего класса
        return obj

    # метод __init__, который инициализирует класс
    def __init__(self, name):
        print("__init__ called")
        self.name = name


# сначала создается экземпляр, а затем он инициализируется
earth = Planet("Earth")  # __new__ called, __init__ called

# те при вызове Planet("Earth") происходит примерно следющее:
# вызывается метод __new__, который получает на вход класс, 2-ым аргументом то, что передаем при создании класса
planet = Planet.__new__(Planet, "Earth")
if isinstance(planet, Planet):  # проверяем соответствие типу
    Planet.__init__(planet, "Earth")  # инициализация объекта, используя те аргументы, которые передавали
