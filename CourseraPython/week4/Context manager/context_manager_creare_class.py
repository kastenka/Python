# Контекстные менеджеры позволяют определить поведение, происходящее в начале и в конце блока исполнения, блока with
# используются при работе с файлами, соединениями, транзакциями

# Чтобы написать свой контекстный менеджер - нужно написать свой класс с магическими методами __enter__ и __exit__
# Методы __enter__ и __exit__ говорят, что происходит в начале и в конце контекстного менеджера
class open_file:  # название класса с маленьких букв, тк это контекстный менеджер
    """Класс-аналог контекстного мендежера"""
    def __init__(self, filename, mode):
        self.f = open(filename, mode)

    # из метода __enter__ возвращается что-то, если это нужно потом записать с помощью оператора "as"
    # можем ничего не возвращать из __enter__, но тогда нет смысла использовать "as"
    def __enter__(self):
        return self.f

    # определяется поведение, что происходит при выходе из блока контекстного менеджера
    def __exit__(self, *args):
        self.f.close()


# вызываем open_file, в этот момент создается объект - вызывается метод __init__, записываем в перменную класса f
# открытый файл с каким-то именем, файл открыт с каким-то mode'ом. переменная f записывается из метода __enter__
with open_file("logfile.txt", "w") as f:
    f.write("Inside open_file context manager")

