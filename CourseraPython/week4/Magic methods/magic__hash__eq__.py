# Магический метод - это метод, определенный внутри класса, который начинается и заканчивается с "__"


class User:
    # магический метод __init__ отвечает за инициализацию созданного объекта
    def __init__(self, name, email):
        self.name = name
        self.email = email

    # __hash__ и __eq__ определяют, как сравниваются наши объекты и что происходит при вызове функции __hash__
    # магический метод __hash__ может, например, переопределить функцию хеширования, которая используется, например,
    # когда мы получаем ключи в словаре
    def __hash__(self):
        return hash(self.email)  # в качестве хеша берется email

    # магический метод __eq__ сравнивнивает только email при сравнении двух объектов
    def __eq__(self, obj):
        return self.email == obj.email


# если создадим двух user'ов с разными именами, но одинаковыми email
jane = User("Jane Doe", "jdoe@example.com")
joe = User("Joe Doe", "jdoe@example.com")

print(jane == joe)  # при сравнении Python будет говорить, что это один и тот же объект, тк вызывается метод __eq__

# функция hash возвращает одно и то же значение, тк используется значение email'а, которое в данном случае одинаковое
print(hash(jane))  # -882297865232447086
print(hash(joe))  # -882297865232447086

# но если попытаемся создать словарь, гле в качестве ключа будет использоваться наш объект user'а, то создастся словарь
# только с одним ключом, а не с двумя объектами, несмотря на то, что итерируемся по двум объектам - тк в качестве хеша
# используется одно и то же значение, и в качестве __eq__ сравнинваются email
user_email_map = {user: user.name for user in [jane, joe]}
print(user_email_map)  # {<__main__.User object at 0x0000021ACB117FD0>: 'Joe Doe'}