"""Важная особенность генераторов - они позволяют хранить состояние и возвращаться к нему, и использовать это для того,
чтобы оптимизировать работу с памятью
Еще один важный момент - возможность генераторам получать какие-то значения, те можем не только возвращаться
к моменту, когда генератор сделал yield, и продолжать исполнение с этого момента с каким-то контекстом, мы можем
еще и передавать туда значения - это момент используется очень активно в асинхронном программировании."""


# генераторная функция, которая хранит общее количество данных, и в бесконечном цикле получает с помощью оператора
# yield значение
def accumulator():
    total = 0
    while True:
        value = yield total
        print("Got: {}".format(value))
        if not value:
            break
        total += value


generator = accumulator()
print(next(generator))  # 0

# можем послать данные в генератор с помощью метода send
# передаем в генератор 1(посылаем значение 1))
print("Accumulated: {}".format(generator.send(1)))  # Got: 1, # Accumulated: 1
print("Accumulated: {}".format(generator.send(1)))  # Got: 1, Accumulated: 2 - накопили два, тк функция хранит состояние
print(next(generator)) # Got: None, StopIteration
