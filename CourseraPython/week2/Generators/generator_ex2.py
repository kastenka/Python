"""Генераторы полезны когда важно, что нужно хранить состояние функции и возвращаться к этому состоянию раз за разом.
Таким образом реализована функция range, которая позволяет получить генератор, какой-то итерабельный объект, по которому
мы может пробежаться и выводить, например, просто в цикле числа. Функция range позволяет не загружать в память сразу
огромный список чисел.
Раньше в Python была функция range бегенераторная и xrange генераторная. Функция range загружала в память огромное
количество чисел, чтобы потом по ним итерироваться. Генератор позволяет делать очень просто - он позволяет запомнить
текущее положение и от него уже идти дальше
"""
def list_generator(list_obj):
    for item in list_obj:
        yield item
        print("After yielding {}".format(item))


generator = list_generator([1, 2])
print(next(generator))  # 1 - print не вывелось, тк выполнении функции генератора прервано
print(next(generator))  # After yielding 1, 2  - print выводится, когда берем следующий элемент
