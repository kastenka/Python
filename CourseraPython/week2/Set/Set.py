# Множества - Set. Изменяемая структура данных
# Хранят в неупорядоченном виде набор уникальных объектов (достигается с помощью функции хеширования)
# В множестве должны хранится неизменяемые объекты - тк неизменяемость гарантирует, что хеш от объекта останется
# прежним, и мы сможем найти нужный адрес памяти в множетстве при поиске элемента

empty_set = set()
number_set = {1, 2, 3, 4, 5, 1}
print(number_set)  # {1, 2, 3, 4, 5}

# проверка, есть ли значение в множестве - выполняется за константное время
print(2 in number_set)  # True

# в множестве можно добавлять элементы и удалять
number_set.add(9)
print(number_set)  # {1, 2, 3, 4, 5, 9}

# метод remove - передаем значение, которое хотим удалить. возвращает None
number_set.remove(2)
print(number_set)  # {1, 3, 4, 5, 9}

# метод pop - удаляет случайное значение (обычно нулевое) из множества и возвращает его
print(number_set.pop())  # 1
print(number_set)  # {3, 4, 5, 9}

# множества поддерживают математические операции над множествами
set_1 = {1, 3, 5, 6, 10}
set_2 = {2, 4, 6, 8, 10}

# Объединение - union "|" - получить значения в двух множествах
print(set_1 | set_2)  # {1, 2, 3, 4, 5, 6, 8, 10}
print(set_1.union(set_2))

# Пересечение - intersection "&" - получить значения, которые повторяются в двух множествах
print(set_1 & set_2)  # {10, 6}
print(set_1.intersection(set_2))

# Разность - difference "-" - получить значения, которые содержатся в одном множестве, но не содержатся в другом
print(set_1 - set_2)  # {1, 3, 5}
print(set_1.difference(set_2))

# Симметрическая разность - symmetric_difference "^" - получить значения, которые не повторяются в множествах
print(set_1 ^ set_2)  # {1, 2, 3, 4, 5, 8}
print(set_1.symmetric_difference(set_2))


