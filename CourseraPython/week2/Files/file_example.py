# Файлы

# для открытия файл используем open(file_name)
f = open("filename.data")  # возвращается файловый объект, с которым можно работать - записывать, читать данные

# файлы можно открывать на запись, чтение, чтение+запись, дозапись с помощью модов, которые передаём в функцию open
text_modes = {"r": "чтение", "w": "запись", "a": "дозапись", "r+": "запись и чтение одновременно"}
binary_modes = ["r", "w", "a", "r+"]  # для открытия файлов в бинарном виде с использованием модов

# открытие файла на запись
f = open("filename.data", "w")

# чтобы записать в файл берем файловый объект f и используем метод write, передавая данные для записи
f.write("что-то записываем в файл\nкакую-то информацию")  # write возвращает количество символов, которые были записаны

# ФАЙЛ НУЖНО ОБЯЗАТЕЛЬНО ЗАКРЫВАТЬ - для закрытия файла используем метод close
""" Что случится, если не закрывать файлы?
- В ОС могут закончиться файловые дескрипторы - Во многих системах существует лимит на количество открытых файловых 
дескрипторов для запущенного процесса и глобальный лимит. 
- Файлы будут закрыты после окончания работы программы (но если программа будет работать долго - плохо, нужно закрывать)
- Python всё равно закроет файл, когда вызовется garbage collector для файлового объекта - CPython закроет файл после
того, как количество ссылок на файловый объект в памяти станет равным 0. Но не стоит пологаться на это.
"""
f.close()


# используем мод "r+", чтобы открыть файл на чтение и запись
f = open("filename.data", "r+")

# можно читать данные из файла с помощью метода read
# read читает по-умолчанию сколько сможет - если файл не поместится в памяти, то это ваши проблемы
data = f.read()
print(data)  # что-то записываем в файл

# когда прочитали весь файл, то указатель того, где мы сейчас находимся в файле - в самом конце
# если попробует прочитать еще раз, то ничего не найдем - весь файл уже прочитан, указатель в самом конце
print(f.tell())  # 45 - количество символов, записанных в файле(указатель в конце файла)
print(f.read())  # ''

# метод seek, чтобы прочитать файл заново и перенести указатель на начало файла
f.seek(0)
print(f.tell())  # 0 - указатель теперь вначале файла

# можно указать конкретное количество информации, которое хотим прочитать, передав size (по-умолчанию - весь файл)
data = f.read(6)  # что-то
print(data)  # что-то

# метод readline, чтобы прочитать одну строку из файла - вернет строку, разбив по символу переноса строки
f = open("filename.data", "r+")
data = f.readline()
print(data)  # выведет только первую строку "что-то записываем в файл", до символа "\n"

# прочитать все строки и разбить их по символу переноса строки, записав их в список
f.seek(0)
data = f.readlines()  # вернет список строк, разбитых по символу перевода строки
print(data)  # ['что-то записываем в файл\n', 'какую-то информацию']
print(type(data))  # <class 'list'>


# если закроем файл и попробуем его прочитать, то ничего не получится
f.close()
f.read()  # ValueError: I/O operation on closed file.